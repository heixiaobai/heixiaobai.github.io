<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在操作系统查看BMC IP</title>
      <link href="/posts/9d6e/"/>
      <url>/posts/9d6e/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>客户有一台华为 RH8100的服务器面板告警灯亮，需要进BMC确认具体告警信息，但是这台设备没有接入带外管理网络，而默认的管理口IP还被已离职的前任运维改了，且没有记录。  </p><p>一般这种没有前置LED屏的服务器，可以去BIOS里面查看和更改管理口IP，但是这台服务器上面现在有在运的业务，而面板只是告警，暂时还没影响业务，所以肯定没法停掉业务重启服务器进BIOS去查看管理IP。  </p><p>这种情况属实是还没碰到过，因为查了下服务器已经过保了，也没有在保的SN能用来代替咨询，只能自己摸索尝试下。  </p><span id="more"></span><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><blockquote><p>然鹅尝试失败了，可以跳到<a href="#%E6%9C%80%E7%BB%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">#最终解决方案</a></p></blockquote><p>在服务器后面看到了有串口，随即翻了下官方文档，发现确实是可以用串口访问命令行管理，但是需要先在BMC里面先将串口由“系统串口”模式切换为“iBMC串口”模式……<br>看到这里已经感觉没啥希望了，抱着试一试不要钱的心态试了下，果然不行……<br>这下只能自个找方法解决了  </p><h3 id="思路1：ARP"><a href="#思路1：ARP" class="headerlink" title="思路1：ARP"></a>思路1：ARP</h3><p>依稀记得ARP会在二层广播自己的IP地址，就拉了台笔记本去直连管理口。  </p><p>提前打开<code>wireshark</code>挂着抓包，然后就接上了网线，稍微等了一下，先用<code>arp</code>命令看了下arp表，可惜没啥信息。  </p><p>把期望放在了<code>wireshark</code>上，翻了寥寥无几的几个ARP包，然而都是本机发出的，压根没看到对端发出的包，也不知道是底层把目标非本机IP的ARP包给丢弃了，还是管理口本身就没有向外发包。  </p><h3 id="思路2：IPv6-DHCP"><a href="#思路2：IPv6-DHCP" class="headerlink" title="思路2：IPv6 DHCP"></a>思路2：IPv6 DHCP</h3><p>又想起通常情况下，这类网口默认情况下应该都是启用IPv6，并且是DHCP模式的。<br>这样如果让服务器管理口通过DHCP获取到分配的IPv6地址，就能直接用IPv6访问BMC了。<br>立马给电脑装了个<code>dnsmasq</code>，并把地址池仅限1个IP，接上管理口就直接开启DHCP。<br>结果是满怀希望地开始尝试，但还是失败了，估摸着是IPv6被关掉了。  </p><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>最终没辙了，打电话给官方客服看看能不能白嫖到个技术支持，因为客户的单位还蛮大的，这个可能性还是有的。<br>果不其然，客服说原则上过保的设备他们不提供技术服务的，但是因为客户单位是重点客户，可以提供一下有限的技术支持，不过风险自行承担。<br>顺带一提，华为RH8100这个机型已经移交超聚变公司管理了，所以应该直接找超聚变的客服。<br>把情况跟技术支持客服一说之后，他也表示这种情况很为难，就先挂了电话，说去找下有没有办法，找到再回我邮件。<br>也没等多久，第二天就给我回了解决方案。  </p><h3 id="ipmitool"><a href="#ipmitool" class="headerlink" title="ipmitool"></a>ipmitool</h3><p>具体方法就是在操作系统上安装<code>ipmitool</code>工具查看它本机的BMC信息。<br>技术客服给我发的是ipmitool的源码压缩包，不过CentOS本身软件仓库上就有现成的工具，直接包管理器安装就行了。  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ipmitool</span></span><br><span class="line"><span class="comment"># 或者去mirror下载rpm包手动安装</span></span><br><span class="line">yum install ipmitool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载内核模块</span></span><br><span class="line"><span class="comment"># 如果需要修改用户名密码，可能需要加载其他ipmi模块</span></span><br><span class="line">modprobe ipmi_devintf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看BMC IP</span></span><br><span class="line">ipmitool lan <span class="built_in">print</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将学校公网上的WordPress迁移到内网</title>
      <link href="/posts/b9a5/"/>
      <url>/posts/b9a5/</url>
      
        <content type="html"><![CDATA[<p>因学校原部署WordPress的公网VPS明年可能不再续费，接到老师委托，需要在内网重新部署一套<code>WordPress</code>服务器，并将公网数据迁移到内网</p><p>我负责在内网搭建LNMP环境将WordPress数据迁移重新部署，以下是于内网服务器上的操作过程</p><span id="more"></span><h2 id="全程操作记录"><a href="#全程操作记录" class="headerlink" title="全程操作记录"></a>全程操作记录</h2><table><thead><tr><th align="center">名称</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">CentOS</td><td align="center">7.2</td></tr><tr><td align="center">WordPress</td><td align="center">5.4.1-zh_CN</td></tr><tr><td align="center">MySQL</td><td align="center">5.7.30</td></tr><tr><td align="center">Nginx</td><td align="center">1.18.0</td></tr><tr><td align="center">PHP</td><td align="center">7.0.33</td></tr><tr><td align="center">VSFTP</td><td align="center">3.0.2</td></tr></tbody></table><p><strong>注：全文为带注释的，数据已脱敏</strong></p><h3 id="安装配置MySQL"><a href="#安装配置MySQL" class="headerlink" title="安装配置MySQL"></a>安装配置MySQL</h3><p><a target="_blank" rel="noopener" href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html">参照官方文档</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装MySQL on CentOS 7存储库</span></span><br><span class="line">yum install https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择存储库</span></span><br><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MySQL</span></span><br><span class="line">yum install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改root默认密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;********&#x27;;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">create database wordpress character set utf8mb4;</span><br><span class="line"></span><br><span class="line">-- 创建用户并授权访问数据库</span><br><span class="line">grant all on wordpress.* to &#x27;wordpress&#x27;@&#x27;localhost&#x27; identified by &#x27;********&#x27;;</span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><h4 id="安装Nginx-1"><a href="#安装Nginx-1" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><p>添加Nginx存储库<code>/etc/yum.repos.d/nginx.repo</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[nginx]</span></span><br><span class="line"><span class="string">name=nginx repo</span></span><br><span class="line"><span class="string">baseurl=https://nginx.org/packages/centos/$releasever/$basearch/</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>使用包管理器安装Nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h3 id="安装配置PHP"><a href="#安装配置PHP" class="headerlink" title="安装配置PHP"></a>安装配置PHP</h3><p><a target="_blank" rel="noopener" href="https://linuxize.com/post/install-php-7-on-centos-7/#enabling-remi-repository">参照非官方文档</a></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装并启用存储库</span></span><br><span class="line">yum install epel-release yum-utils</span><br><span class="line">yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装php及模块</span></span><br><span class="line">yum install php php-fpm php-mysql php-mbstring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置目录权限</span></span><br><span class="line">chown -R nginx:nginx /var/lib/php/</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>编辑php-fpm默认配置<code>/etc/php-fpm.d/www.conf</code></p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">; 将默认用户从apache改成<span class="attribute">nginx</span></span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line"></span><br><span class="line">; 基于本博客的预计并发量较低，我选择<span class="attribute">unix</span> socket，而非tcp socket，可以降低额外的开销</span><br><span class="line">listen = /run/php-fpm/www.sock</span><br><span class="line">listen.owner = nginx</span><br><span class="line">listen.group = nginx</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start php-fpm</span><br><span class="line">systemctl <span class="built_in">enable</span> php-fpm</span><br></pre></td></tr></table></figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    # ......</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 192.168.*.*;</span><br><span class="line">        root /var/www/wordpress;</span><br><span class="line">        index index.html index.php;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.php?$args;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            fastcgi_pass unix:/run/php-fpm/www.sock;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署WordPress"><a href="#部署WordPress" class="headerlink" title="部署WordPress"></a>部署WordPress</h3><p>下载WordPress</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cn.wordpress.org/latest-zh_CN.zip</span><br></pre></td></tr></table></figure><p>解压后将目录下的<code>wp-config-sample.php</code>重命名为<code>wp-config.php</code>并编辑</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库名称</span></span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span> );</span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span> );</span><br><span class="line"><span class="comment"># 数据库用户密码</span></span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;********&#x27;</span> );</span><br><span class="line"><span class="comment"># 数据库IP，默认</span></span><br><span class="line">define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span> );</span><br><span class="line"><span class="comment"># 数据库字符集</span></span><br><span class="line">define( <span class="string">&#x27;DB_CHARSET&#x27;</span>, <span class="string">&#x27;utf8mb4&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从https://api.wordpress.org/secret-key/1.1/salt/生成一组安全密钥</span></span><br><span class="line">define(<span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;********&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># WordPress对于主题或插件的安装不再需要FTP，而是通过PHP直接操作</span></span><br><span class="line">define(<span class="string">&quot;FS_METHOD&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br></pre></td></tr></table></figure><p>移动目录并修改权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r wordpress /var/www/</span><br><span class="line">chown -R nginx:nginx /var/www/wordpress/</span><br></pre></td></tr></table></figure><p>启用nginx服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><p>添加防火墙规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=http --zone=public</span><br><span class="line">firewall-cmd --add-service=http --zone=public --permanent</span><br></pre></td></tr></table></figure><h4 id="从Web页面配置"><a href="#从Web页面配置" class="headerlink" title="从Web页面配置"></a>从Web页面配置</h4><p>浏览器访问<code>http:/192.168.*.*/wp-admin-install.php</code>进行安装初始化</p><p>登录管理后台</p><p>发现主题与插件页面出现”无法建立到WordPress.org的安全连接”的问题，获取<code>api.wordpress.org</code>的IP地址写入hosts，解决</p><p>安装<code>Import Export WordPress Users</code>插件，在原服务器使用这个插件将用户信息导出，在新服务器使用插件将用户信息导入</p><p>从管理菜单-工具-导入，安装WordPress，将原服务器导出的文档内容导入新服务器并分配数据对应的用户</p><p>从原服务器上的<code>wp-content</code>目录 拷贝到新服务器</p><p><strong>以上，迁移数据内网重新部署WordPress完毕</strong></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次Minecraft联机异常解决过程</title>
      <link href="/posts/42f/"/>
      <url>/posts/42f/</url>
      
        <content type="html"><![CDATA[<p>处理一次局域网联机Minecraft无法搜索到局域网游戏的情况<br>因为这篇文章是在我解决之后才开始写的,我尽量还原当时的解决思路和过程,但也会有所修改<br>然后因为我对相关技术的了解度不够,可能会存在一些描述失误,还请谅解</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=4010201&auto=0&height=66"></iframe><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>和同学局域网联机Minecraft,但是部分人出现了几次无法正常搜索到局域网游戏的情况</p><p><img src="/posts/42f/05-12-2019-Minecraft-Client-1.jpg" alt="无法搜索到服务端"></p><p>网络环境</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">Minecraft</td><td align="center">1.12.2</td></tr><tr><td align="center">网络环境</td><td align="center">手机热点</td></tr><tr><td align="center">服务端</td><td align="center">客户端自带局域网游戏</td></tr></tbody></table><h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><p>首先尝试简单的排查修复</p><h4 id="网络连接问题"><a href="#网络连接问题" class="headerlink" title="网络连接问题"></a>网络连接问题</h4><p>首先WiFi连接正常<br>然后互相能ping通<br>初步排除简单网络故障</p><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>下一步我怀疑是防火墙问题<br>不过Windows10的防火墙实际上不大容易出问题,因为按照设计机制,当应用尝试联网的时候,会弹出请求提示框,申请连接网络<br>这时候点击同意后通常就没什么问题了<br>不过也可能存在误点拒绝或其他未知的情况  </p><p>直接关闭各主机防火墙<br>然而即使关闭防火墙后,依然没有解决</p><h4 id="网络适配器"><a href="#网络适配器" class="headerlink" title="网络适配器"></a>网络适配器</h4><p>这时候很容易怀疑到是网络适配器问题<br>之所以会想到这里是因为我们的电脑上均有虚拟机软件创建的虚拟网卡<br>猜测可能Minecraft客户端仅在单一的网络接口上搜索局域网游戏<br>在禁用掉多余的网络适配器之后,重新扫描游戏,成功搜索到服务端  </p><h3 id="问题初步解决"><a href="#问题初步解决" class="headerlink" title="问题初步解决"></a>问题初步解决</h3><p>本来问题就应该就这样解决了的<br>但是因为我们在不同的网络环境(有线、无线)切换而进行联机<br>当出现问题的时候就需要再次禁用启用网络适配器<br>而我因为虚拟机使用得比较频繁,需要一直开启虚拟网卡<br>每次都来回禁用启用也比较烦<br>然后就冒出了想摸索一下造成这个问题是原因是什么</p><h2 id="深入探究"><a href="#深入探究" class="headerlink" title="深入探究"></a>深入探究</h2><h3 id="Minecraft服务端机制"><a href="#Minecraft服务端机制" class="headerlink" title="Minecraft服务端机制"></a>Minecraft服务端机制</h3><p>按照<a target="_blank" rel="noopener" href="https://minecraft.gamepedia.com/Tutorials/Setting_up_a_LAN_world">Minecraft Wiki - Setting up a LAN world</a>中所述</p><blockquote><p>On the technical side, a Minecraft client with an opened LAN game sends a UDP multicast to the local address 224.0.2.60:4445 every 1.5 seconds. Other clients then listen for this multicast to show your game in their multiplayer menu.<br>在技术层面，向局域网开放游戏的Minecraft客户端每1.5秒会向本地地址224.0.2.60:4445发&gt;送一个UDP多播。其他客户端会侦听此多播以把你的游戏显示在他们的多人游戏菜单中</p></blockquote><p>看起来似乎没什么问题<br>服务端发送信息 -&gt; 客户端监听到 -&gt; 加入服务器</p><p>不过我对多播了解得并不深,仅限于与单播、广播区分</p><h3 id="开始尝试排查"><a href="#开始尝试排查" class="headerlink" title="开始尝试排查"></a>开始尝试排查</h3><p>使用Wireshark监听我的WLAN(我们使用无线网络进行联机)</p><p><img src="/posts/42f/05-12-2019-Minecraft-Wireshark-WLAN.jpg" alt="Wireshark WLAN"></p><p>从图中看来,是能正常接受到来自服务端(192.168.43.70)的多播信息的<br>但是为什么这样都还是没法正常搜索到游戏呢</p><h3 id="尝试查找解决方式"><a href="#尝试查找解决方式" class="headerlink" title="尝试查找解决方式"></a>尝试查找解决方式</h3><p>接着我搜索到了这篇文章<a target="_blank" rel="noopener" href="https://blog.zencoffee.org/2016/12/minecraft-local-server-discovery-cant-find-lan-games/">Minecraft Local Server Discovery – Can’t find LAN games?</a><br>文中提到作者因为网络接口优先级的问题,导致Minecraft绑定了错误的端口</p><p>使用命令<code>netsh interface ip show joins</code>查看各个网络适配器加入的多播组<br>正常的输出类似于：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接口 16: WLAN</span><br><span class="line"></span><br><span class="line">作用域       参照       上一次 地址</span><br><span class="line">----------  ----------  ----   ---------------------------------</span><br><span class="line">0                    0  是     224.0.0.1</span><br><span class="line">0                    2  是     224.0.0.251</span><br><span class="line">0                    1  是     224.0.0.252</span><br><span class="line">0                    3  是     239.255.255.250</span><br><span class="line"></span><br><span class="line">接口 23: 以太网</span><br><span class="line"></span><br><span class="line">作用域       参照       上一次 地址</span><br><span class="line">----------  ----------  ----   ---------------------------------</span><br><span class="line">0                    0  否     224.0.0.1</span><br><span class="line">0                    2  否     224.0.0.251</span><br><span class="line">0                    1  否     224.0.0.252</span><br><span class="line">0                    0  是     224.0.2.60</span><br><span class="line">0                    3  是     239.255.255.250</span><br></pre></td></tr></table></figure><p>从上面的输出可以看到,以太网接口加入了多播组224.0.2.60,但是我们进行联机的网络(WLAN)上并没有加入</p><p>这里我搜索了一些资料稍微了解了一下多播的机制<br><a target="_blank" rel="noopener" href="https://baike.baidu.com/item/%E5%A4%9A%E6%92%AD">多播 - 百度百科</a><br><a target="_blank" rel="noopener" href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%92%AD">多播 - 维基百科</a></p><p>接下来按照作者提供的方式,使用以下命令调整网络接口优先级,将异常加入多播组的接口优先级调低,继而使Minecraft去选择正常(使用)的网络接口</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-netipinterface</span> | <span class="built_in">where-object</span> &#123; <span class="variable">$_</span>.InterfaceAlias <span class="operator">-like</span> <span class="string">&quot;网络接口名&quot;</span> &#125; | <span class="built_in">set-netipinterface</span> <span class="literal">-interfacemetric</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>上面这条命令的作用是调整指定Windows设置中网络接口的跃点数(越小越优先,默认自动)<br>虽然我认为这样把希望连接的接口的跃点数调低似乎是更好的选择(网络适配器存在多个)<br>但是事实上这个机制我了解得不多</p><p>不过我发现调整了这个选项对我没有作用,并且调整这个项会影响其他网络连接(如上网)的优&gt;先级,未免就有些得不偿失了</p><p>但是这时候发现了一个问题,既然我的WLAN口没有加入多播组224.0.2.60,那么我最开始为什么能在WLAN接口监听到多播信息呢？</p><p>经朋友提醒,因为无线网络的工作方式是类似于Hub的<br>将信息发送给所有连接终端,然后由终端查看是否发送给自己的,从而决定是否丢弃<br>所以我能从WLAN接口上监听到多播包,但是事实上并没有接收处理</p><p>现在的思路是尝试手动使网络接口加入多播组,使Minecraft能监听到多播信息</p><p>然后我开始在搜索关于Windows使指定网络接口加入多播组的方式,但是废了一番功夫,并没有&gt;找到能简单实现的方式(命令)</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>在一个帖子中发现有人提到Windows不提供直接加入的多播组的方式,需要实现的话可以通过socket实现</p><p>不过由于我对于socket并不太熟悉,这里直接参考别人的代码<br><a target="_blank" rel="noopener" href="https://www.cnblogs.com/fishou/p/4194316.html">python实现多播数据的发送和接收</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">ANY = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;输入IP:&quot;</span>)) <span class="comment"># 输入希望加入多播组的网络适配器的IP</span></span><br><span class="line">MCAST_ADDR = <span class="string">&#x27;224.0.2.60&#x27;</span>   <span class="comment"># 224.0.2.60是Minecraft服务端向局域网发送主机信息的多&gt;播地址</span></span><br><span class="line">MCAST_PORT = <span class="number">4445</span></span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) <span class="comment">#创建UDP socket</span></span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>) <span class="comment">#允许端口复用</span></span><br><span class="line">sock.bind((ANY,MCAST_PORT))</span><br><span class="line">sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, <span class="number">255</span>)</span><br><span class="line">status = sock.setsockopt(socket.IPPROTO_IP,</span><br><span class="line">socket.IP_ADD_MEMBERSHIP,</span><br><span class="line">socket.inet_aton(MCAST_ADDR) + socket.inet_aton(ANY));</span><br><span class="line"></span><br><span class="line">sock.setblocking(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data, addr = sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">except</span> BaseException:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;FROM: &quot;</span>, addr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DATA: &quot;</span>, data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>保存为文件并执行后</p><p><img src="/posts/42f/05-12-2019-Minecraft-Python.jpg" alt="Python代码"></p><p>从输出信息可以看到服务端的IP与端口,以及服务端的信息</p><p>再次执行<code>netsh interface ip show joins</code>可以看到,WLAN接口以及加入多播组</p><p><img src="/posts/42f/05-12-2019-Minecraft-Network-Join.jpg" alt="加入的多播组"></p><p>不过这种方式不太清楚是否能让Minecraft客户端正确搜索到服务端<br>因为实际上建立连接并监听的是Python,而不是Minecraft</p><p>查看Minecraft客户端</p><p><img src="/posts/42f/05-12-2019-Minecraft-Client-2.jpg" alt="发现服务端"></p><p>成功搜索到服务端信息</p><p>然而,整套流程下来,成功解决问题,但还是不清楚是怎么解决的<br>因为对于网络系统实现机制,以及Minecraft的网络发现机制不太清楚╮(╯▽╰)╭</p><p>不过相信总有一天回头再看看,会理解这一切</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
